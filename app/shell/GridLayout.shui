require "shellfish/ui";

MouseBox {

    property items: []
    property columns: 2

    function swap(child, direction)
    {
        const childIndex = items.indexOf(child);
        const otherIndex = childIndex + direction;

        if (childIndex >= 0 && otherIndex >= 0 &&
            childIndex < items.length && otherIndex < items.length)
        {
            const other = items[otherIndex];
            const tmp = child.sortIndex;
            child.sortIndex = other.sortIndex;
            other.sortIndex = tmp;
            update();
        }
    }

    function update()
    {
        const childItems = children().slice(1);
        childItems.sort((a, b) => { return a.sortIndex - b.sortIndex; });
        items = childItems.slice();

        //items = children().slice(1);
        //items.sort((a, b) => { return a.sortIndex - b.sortIndex; });

        const vitems = items.filter(c => c.visible);
        const amount = vitems.length;

        let cols = bbox.width > bbox.height ? amount : 1; //Math.min(columns, amount); //Math.ceil(Math.sqrt(amount));
        let rows = Math.ceil(amount / cols);

        /*
        if (bbox.width < bbox.height)
        {
            const tmp = rows;
            rows = cols;
            cols = tmp;
        }
        */

        let cx = 0;
        let cy = 0;
        let cw = bbox.width / cols;
        let ch = bbox.height / rows;
        let col = 0;

        //console.log("amount: " + amount + ", cols: " + cols + ", rows: " + rows);
        //console.log("cw: " + cw + ", ch: " + ch);

        const marginH = cols > 1 && vitems.length > 1 ? 3 : 0;
        const marginV = rows > 1 && vitems.length > 1 ? 3 : 0;

        vitems.forEach((item, idx) =>
        {
            if (idx === (rows - 1) * cols)
            {
                // last row begins
                cw = bbox.width / (amount - idx);
            }

            item.position = "free";
            item.fillWidth = false;
            item.fillHeight = false;
            //console.log("cx: " + cx + ", cy: " + cy);
            item.x = cx + marginH;
            item.y = cy + marginV;
            item.width = cw - 2 * marginH;
            item.height = ch - 2 * marginV;
            cx += cw;
            ++col;
            if (col >= cols)
            {
                cx = 0;
                cy += ch;
                col = 0;
            }
        });
    }

    onBboxChanged: () => { update(); }
    onChildrenChanged: () => { wait(100).then(() => { update(); }); }
    onColumnsChanged: () => { update(); }
}