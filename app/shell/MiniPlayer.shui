require "shellfish/ui";
require "./SeekBar.shui";

Box {
    id: playerBox

    function open(files, current, startPosition)
    {
        playerBox.model.reset(files);
        playerBox.current = current;
        playerBox.startPosition = startPosition;
    }

    function stripExtension(filename)
    {
        const pos = filename.lastIndexOf(".");
        if (pos !== -1)
        {
            return filename.substr(0, pos);
        }
        else
        {
            return pos;
        }
    }

    property model: ListModel { }
    property current: -1
    property startPosition: 0
    property title: model.at(current) ? model.at(current).name : ""

    position: "global"
    origin: "bottom-left"
    x: (doc.windowWidth - bboxWidth) / 2

    onCurrentChanged: () =>
    {
        if (current === -1)
        {
            videoPlayer.source = "";
            coverArt.source = "";
        }
        else
        {
            const mediaItem = model.at(current);
            if (mediaItem.mimetype.startsWith("video/"))
            {
                coverArt.visible = false;
                coverArt.source = "";
                videoPlayer.visible = true;
                videoPlayer.source = mediaItem.path;
            }
            else if (mediaItem.mimetype.startsWith("audio/"))
            {
                videoPlayer.visible = false;
                coverArt.visible = true;
                videoPlayer.source = mediaItem.path;
                const newSource = mediaItem.path + "?view=cover";
                if (coverArt.source !== newSource)
                {
                    coverArt.source = newSource;
                }
            }
        }
    }

    // display box
    Box {
        position: "global"
        origin: "bottom-left"
        x: (thisDocument.windowWidth - bboxWidth) / 2
        y: controlsBox.containsMouse ? controlsBox.bboxHeight - 1 /* border line */ : -bboxHeight
        yTransition: NumberAnimation { }
        width: controlsBox.bboxWidth
        height: width
        color: "black"
        borderColor: theme.borderColor
        borderWidth: 1

        Box {
            visible: playerBox.title !== ""

            fillWidth: true
            color: theme.primaryColor
            layout: "center"

            Label {
                margins: theme.paddingSmall
                fillWidth: true
                overflowBehavior: "ellipsis"
                horizontalAlignment: "center"
                color: theme.primaryBackgroundColor
                bold: true
                text: escapeMarkup(stripExtension(playerBox.title))
            }
        }

        Box {
            id: coverArt

            property source: ""

            visible: false
            fill: true
            margins: theme.paddingSmall
            color: theme.secondaryBackgroundColor

            Image {
                visible: status === "success"
                fill: true
                fitMode: "contain"
                source: coverArt.source
            }
        }

        Box {
            visible: videoPlayer.visible
            fill: true
            margins: theme.paddingSmall
            color: "black"    

            Video {
                id: videoPlayer

                visible: false
                fill: true

                onStatusChanged: () =>
                {
                    if (status === "success")
                    {
                        if (playerBox.startPosition > 0)
                        {
                            videoPlayer.currentTime = playerBox.startPosition;
                            playerBox.startPosition = 0;
                        }
                    }
                }

                onFinish: () =>
                {
                    if (playerBox.current < playerBox.model.size - 1)
                    {
                        playerBox.current = playerBox.current + 1;
                    }
                }
            }
        }

        // seek bar
        Box {
            fillWidth: true
            height: theme.itemHeightMedium
            layout: "center-column"

            Box {
                marginLeft: theme.paddingSmall
                marginRight: theme.paddingSmall
                fillWidth: true
                layout: "center-row"

                Label {
                    fillWidth: true
                    fontSize: theme.fontSizeSmall
                    text: core.formatSeconds(videoPlayer.currentTime, false)
                }

                Label {
                    fontSize: theme.fontSizeSmall
                    text: core.formatSeconds(videoPlayer.duration, false)
                }
            }

            SeekBar {
                marginLeft: theme.paddingSmall
                marginRight: theme.paddingSmall
                fillWidth: true
                height: theme.paddingSmall
                player: videoPlayer
            }
        }

    }

    MouseBox {
        id: controlsBox

        height: theme.itemHeightMedium
        color: theme.secondaryBackgroundColor
        borderColor: theme.borderColor
        borderWidth: 1

        layout: "row"

        Button {
            fillHeight: true
            width: bboxHeight
            flat: true
            icon: "media-previous"

            onClick: () =>
            {
                if (videoPlayer.currentTime < 3 && playerBox.current > 0)
                {
                    playerBox.current = playerBox.current - 1;
                }
                else
                {
                    videoPlayer.currentTime = 0;
                }
            }
        }

        Button {
            fillHeight: true
            width: bboxHeight
            flat: true
            icon: videoPlayer.playing ? "media-pause" : "media-play"

            onClick: () =>
            {
                if (videoPlayer.playing)
                {
                    videoPlayer.pause();
                }
                else
                {
                    videoPlayer.play();
                }
            }
        }

        Button {
            enabled: !! playerBox.model && (playerBox.current < playerBox.model.size - 1)
            fillHeight: true
            width: bboxHeight
            flat: true
            icon: "media-next"

            onClick: () =>
            {
                playerBox.current = playerBox.current + 1;
            }
        }

        SelectionBox {
            width: theme.itemWidthLarge * 2
            fillHeight: true
            flat: true
            color: theme.secondaryBackgroundColor

            model: playerBox.model
            formatText: item => escapeMarkup(stripExtension(item.name))

            playerBox.onCurrentChanged: () =>
            {
                selection = Math.max(0, playerBox.current);
            }

            onSelectionChanged: () =>
            {
                playerBox.current = selection;
            }
        }

        Button {
            fillHeight: true
            width: bboxHeight
            flat: true
            icon: "ui-clear"

            onClick: () =>
            {
                thisDocument.miniPlayer = false;
            }
        }
    }
}
