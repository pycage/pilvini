require "shellfish/ui";

Box {
    id: header

    property model: ListModel { }
    property titleRole: "title"
    property columnWidths: []

    function resetColumns()
    {
        if (colRepeater.count === 0)
        {
            return;
        }

        let sizes = colRepeater.items.map((item, idx) =>
        {
            const modelItem = model.at(idx);
            const prefered = modelItem.width || -1;

            return prefered === -1 ? 0 : prefered;
        });

        const sum = sizes.reduce((a, b) => a + b);
        const remainder = bboxWidth - sum;
        const flexAmount = sizes.filter(s => s === 0).length;
        
        if (flexAmount > 0)
        {
            const size = Math.max(theme.itemWidthSmall, remainder / sizes.filter(s => s === 0).length);
            sizes = sizes.map(s => s === 0 ? size : s);
        }

        columnWidths = sizes;

        columnWidths.forEach((w, idx) =>
        {
            colRepeater.items[idx].width = w;
        });
    }

    function resizeColumn(idx, n)
    {
        const resizable = model.at(idx).resizable ?? true;
        console.log("resizable " + idx +" " + resizable);
        if (! resizable)
        {
            return;
        }

        const ws = colRepeater.items.map(item =>
        {
            return item.width;
        });
        const totalWidth = ws.reduce((a, b) => a + b);

        colRepeater.items[idx].width += n;

        columnWidths = colRepeater.items.map(item =>
        {
            return item.width;
        });
    }

    fillWidth: true
    height: theme.itemHeightSmall
    layout: "row"

    onBboxWidthChanged: () => { resetColumns(); }

    Repeater {
        id: colRepeater

        model: header.model

        delegate: template MouseBox {
            width: 100
            fillHeight: true
            color: containsMouse ? theme.highlightBackgroundColor : "transparent"

            layout: "center-row"

            Label {
                fillWidth: true
                marginLeft: theme.paddingSmall
                marginRight: theme.paddingSmall
                overflowBehavior: "wrap"
                color: parent.containsMouse ? theme.highlightColor : theme.primaryColor
                text: parent.modelData.value[header.titleRole]
            }

            MouseBox {
                width: 6
                fillHeight: true
                cursor: "col-resize"

                onDrag: ev =>
                {
                    ev.accepted = true;
                    header.resizeColumn(parent.modelData.index, ev.deltaX);
                }

                onDoubleClick: ev =>
                {
                    ev.accepted = true;
                    header.resetColumns();
                }

                Box {
                    position: "free"
                    origin: "top-right"
                    width: 1
                    fillHeight: true
                    color: theme.borderColor
                }
            }
        }
    }
}