require "shellfish/ui";
require "./inertialengine.js";
require "./PageBrowser.shui";
require "./PageItem.shui";
require "./ViewportBox.shui";

Box {
    id: box

    property model: ListModel { }
    property current: 0

    property title: model.at(current) ? model.at(current).name : ""

    PageBrowser {
        id: browser

        fillWidth: true
        fillHeight: true

        model: box.model
        current: box.current

        delegate: template PageItem {
            id: page

            pageBrowser: browser

            Canvas {
                id: image

                property status: cnvImg.status
                property source: page.x >= 0 ? page.modelData.value.path : ""
                property vpX: page.viewport.viewX
                property vpY: page.viewport.viewY
                property vpScale: page.viewport.scale

                visible: status === "success"
                position: "free"
                fillWidth: true
                fillHeight: true

                originalWidth: bboxWidth
                originalHeight: bboxHeight

                function update()
                {
                    if (originalWidth * originalHeight === 0)
                    {
                        return;
                    }

                    const sx = page.viewport.viewX;
                    const sy = page.viewport.viewY;
                    const sw = originalWidth / page.viewport.scale;
                    const sh = originalHeight / page.viewport.scale;

                    const ctx = context2d;
                    ctx.clearRect(0, 0, originalWidth, originalHeight);
                    ctx.drawImage(cnvImg.get().get(), sx, sy, sw, sh, 0, 0, originalWidth, originalHeight);
                }

                onVpXChanged: () => { update(); }
                onVpYChanged: () => { update(); }
                onVpScaleChanged: () =>
                {
                    browser.scrollable = page.viewport.scale < page.viewport.minScale + 0.0001;
                    update();
                }
                onOriginalWidthChanged: () => { update(); }
                onOriginalHeightChanged: () => { update(); }

                onStatusChanged: () =>
                {
                    if (status === "success")
                    {
                        page.viewport.originalWidth = cnvImg.originalWidth;
                        page.viewport.originalHeight = cnvImg.originalHeight;
                        page.viewport.scaleToFit();
                        update();
                    }
                }

                Image {
                    id: cnvImg

                    visible: false
                    source: parent.source
                }

            }

            Label {
                visible: ! image.visible
                position: "free"
                x: (parent.bboxWidth - bboxWidth) / 2
                y: (parent.bboxHeight - bboxHeight) / 2
                fontSize: theme.fontSizeLarge
                text: "[icon:ui-spinner5]"
            }

        }
    }

}
