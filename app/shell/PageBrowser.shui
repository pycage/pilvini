require "shellfish/ui";
require "./ViewportBox.shui";

Box {
    id: box

    property model: ListModel { }
    property current: 0
    property delegate: Box { }
    property scrollable: true
    property showNavigation: false

    property title: model.at(current) ? model.at(current).name : ""

    color: "black"

    function previousPage()
    {
        if (pageSlider.value > 0)
        {
            pageSlider.value -= 1;
        }
    }

    function nextPage()
    {
        if (pageSlider.value < pageSlider.maxValue)
        {
            pageSlider.value += 1;
        }
    }

    ListView {
        id: pagesListView

        fillWidth: true
        fillHeight: true

        orientation: "horizontal"
        overflowBehavior: box.scrollable ? "scroll" : "none"

        model: box.model

        cellWidth: bboxWidth
        cellHeight: bboxHeight
        cacheMargin: bboxWidth

        snapMode: "begin"

        onContentWidthChanged: () =>
        {
            positionViewAt(box.current);
        }

        onContentXChanged: () =>
        {
            const atCenter = Math.floor((contentX + cellWidth / 2) / cellWidth);
            if (atCenter !== box.current)
            {
                box.current = atCenter;
            }
        }

        delegate: box.delegate

    }

    Box {
        visible: controls.visible

        position: "free"
        origin: "bottom-left"
        fillWidth: true
        height: controls.bboxHeight * 1.3

        LinearGradient {
            id: grd

            GradientStop { position: 0.0; color: theme.primaryBackgroundColor.alpha(0.8) }
            GradientStop { position: 0.5; color: theme.primaryBackgroundColor.alpha(0.8) }
            GradientStop { position: 1.0; color: "transparent" }
        }

        gradient: grd.expression
    }

    Box {
        id: controls

        visible: box.showNavigation

        position: "free"
        origin: "bottom-left"
        fillWidth: true
        marginLeft: theme.paddingSmall
        marginRight: marginLeft
        marginBottom: marginLeft

        Box {
            fillWidth: true
            marginTop: theme.paddingSmall
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            height: theme.itemHeightLarge
            layout: "row"

            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: "ui-clear"

                onClick: ev =>
                {
                    ev.accepted = true;
                    thisFileViewer.close();
                }
            }

            /*
            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                checked: ! thisFileViewer.maximized
                icon: "fs-folder"

                onClick: ev =>
                {
                    ev.accepted = true;
                    thisFileViewer.maximized = ! thisFileViewer.maximized;
                }
            }
            */

            Box { fillWidth: true }

            Button {
                width: bboxHeight
                fillHeight: true
                flat: true
                icon: "ui-zoom"
                onClick: ev =>
                {
                    const page = pagesListView.getItem(
                        pagesListView.indexAt(pagesListView.contentX + pagesListView.bboxWidth / 2,
                                              pagesListView.bboxHeight / 2));
                    if (page)
                    {
                        page.zoom(0);
                    }
                    ev.accepted = true;
                }
            }

            Button {
                width: bboxHeight
                fillHeight: true
                flat: true
                icon: "ui-zoom_out"
                onClick: ev =>
                {
                    const page = pagesListView.getItem(
                        pagesListView.indexAt(pagesListView.contentX + pagesListView.bboxWidth / 2,
                                              pagesListView.bboxHeight / 2));
                    if (page)
                    {
                        page.zoom(0.75);
                    }
                    ev.accepted = true;
                }
            }

            Button {
                width: bboxHeight
                fillHeight: true
                flat: true
                icon: "ui-zoom_in"
                onClick: ev =>
                {
                    const page = pagesListView.getItem(
                        pagesListView.indexAt(pagesListView.contentX + pagesListView.bboxWidth / 2,
                                              pagesListView.bboxHeight / 2));
                    if (page)
                    {
                        page.zoom(1.5);
                    }
                    ev.accepted = true;
                }
            }
        }

        Box {
            fillWidth: true
            marginTop: theme.paddingSmall
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            height: theme.itemHeightLarge
            layout: "row"


            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: "media-previous"
                onClick: () =>
                {
                    pageSlider.value = pageSlider.minValue;
                }
            }

            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: "media-backward"
                onClick: () =>
                {
                    pageSlider.value -= 1;
                }
            }

            Box { fillWidth: true }

            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: slideshowTimer.active ? "media-pause" : "media-play"

                onClick: () =>
                {
                    if (slideshowTimer.active)
                    {
                        slideshowTimer.active = false;
                    }
                    else
                    {
                        const menu = menuT();
                        menu.popup(self);
                    }
                }

                property menuT: template Menu {
                    Repeater {
                        model: ListModel { data: [1, 3, 5, 10, 30, 60] }

                        delegate: template MenuItem {
                            text: modelData.value + " s"
                            onClick: () =>
                            {
                                slideshowTimer.interval = modelData.value * 1000;
                                slideshowTimer.active = true;
                            }
                        }
                    }
                }
            }

            Box { fillWidth: true }

            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: "media-forward"
                onClick: () =>
                {
                    pageSlider.value += 1;
                }
            }

            Button {
                fillHeight: true
                width: bboxHeight
                flat: true
                icon: "media-next"
                onClick: () =>
                {
                    pageSlider.value = pageSlider.maxValue;
                }
            }
        }

        Timer {
            id: slideshowTimer

            property active: false

            interval: 5000
            running: active
            repeat: true

            onTimeout: () =>
            {
                if (pageSlider.value < pageSlider.maxValue)
                {
                    pageSlider.value += 1;
                }
                else
                {
                    active = false;
                }
            }

        }

        Slider {
            id: pageSlider

            property targetPos: 0
            property pos: 0
            posTransition: NumberAnimation { }

            marginTop: theme.paddingSmall
            marginLeft: theme.paddingMedium
            marginRight: theme.paddingMedium
            marginBottom: theme.paddingSmall

            fillWidth: true

            minValue: 0
            maxValue: pagesListView.count - 1
            value: 0

            onPosChanged: () =>
            {
                if (pagesListView.contentX !== pos)
                {
                    pagesListView.contentX = pos;
                }
            }

            box.onCurrentChanged: () =>
            {
                if (pos === targetPos && box.current !== value && ! seeking)
                {
                    value = box.current;
                }
            }

            onValueChanged: () =>
            {
                if (Math.round(value) !== box.current)
                {
                    targetPos = Math.round(value) * pagesListView.cellWidth;
                    // quite a hack to circumvent transitioning...
                    self.get().pos = pagesListView.contentX;
                    pos = targetPos;
                }
            }

            styleOfHandle: template Box {
                width: height
                height: theme.itemHeightSmall

                borderRadius: bboxWidth / 2
                color: theme.primaryColor
            }
        }

        Box {
            fillWidth: true
            marginLeft: theme.paddingMedium
            marginRight: theme.paddingMedium
            marginBottom: theme.paddingSmall
            layout: "center-row"

            Label {
                text: Math.round(pageSlider.seekValue) + 1
            }

            Label {
                fillWidth: true
                marginLeft: theme.paddingMedium
                marginRight: theme.paddingMedium
                horizontalAlignment: "center"
                bold: true
                overflowBehavior: "ellipsis"
                text: low.escapeMarkup(pagesListView.model.at(Math.round(pageSlider.seekValue))?.name ?? "")
            }

            Label {
                text: pagesListView.count
            }
        }

    }

}
