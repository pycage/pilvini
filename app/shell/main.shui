require "shellfish/ui";
require "./FilesBox.shui";
require "./FileViewer.shui";
require "./GridLayout.shui";
require "./SettingsDialog.shui";
require "/icons/comm-icons.css";
require "/icons/fs-icons.css";
require "/icons/media-icons.css";
require "/icons/ui-icons.css";

Document {
    id: doc

    property loggedIn: false

    property darkMode: systemDarkMode
    property darkTheme: DarkTheme { }
    property lightTheme: Theme { }
    theme: darkMode ? darkTheme : lightTheme

    color: theme.primaryBackgroundColor

    onContextMenu: ev => { ev.accepted = true; }

    onInitialization: () =>
    {
        remoteFs.list("/")
        .then(f =>
        {
            loggedIn = true;
        })
        .catch(err =>
        {
            alert("Login Failed.");
        });
    }

    DavFS {
        id: remoteFs
    }

    OfflineFS {
        id: offlineFs
        volume: "offline"
    }

    ListModel {
        id: panesModel

        data: ["/"]
    }

    ListModel {
        id: mediaModel

        data: []
    }

    Box {
        visible: doc.loggedIn

        fillWidth: true
        height: documentRoot.windowHeight
        color: theme.contentBackgroundColor

        Box {
            fillWidth: true
            height: theme.itemHeightMedium
            color: theme.secondaryBackgroundColor

            layout: "center-row"

            Label {
                marginLeft: theme.paddingSmall
                fillWidth: true
                bold: true
                text: "Pilvini Secure Cloud Drive"
            }

            Button {
                fillHeight: true
                flat: true
                icon: "ui-menu"

                onClick: (ev) =>
                {
                    ev.accepted = true;
                    const menu = menuT();
                    menu.popup(self);
                }

                property menuT: template Menu {

                    MenuItem {
                        text: "About..."
                    }

                    MenuItem {
                        text: doc.darkMode ? "Light Mode"
                                           : "Dark Mode"
                        onClick: () =>
                        {
                            doc.darkMode = ! doc.darkMode;
                        }
                    }

                    MenuItem {
                        text: "Toggle Fullscreen"
                        onClick: () =>
                        {
                            if (documentRoot.fullscreenItem)
                            {
                                documentRoot.fullscreenItem = null;
                            }
                            else
                            {
                                documentRoot.fullscreenItem = documentRoot;
                            }
                        }
                    }

                    MenuItem {
                        text: "Settings..."
                        onClick: () =>
                        {
                            const dlg = doc.settingsDialogT();
                            dlg.show();
                        }
                    }

                    MenuItem {
                        text: "Log Out"
                        onClick: () =>
                        {
                            window.fetch("/logout")
                            .then(() => { window.location.reload(); })
                            .catch(err => { });
                        }
                    }

                }
            }
            
        }

        Box {
            fillWidth: true
            fillHeight: true
            layout: bbox.width > bbox.height ? "row" : "column"

            GridLayout {
                id: grid

                property maximizedItem: null

                fillWidth: true
                fillHeight: true

                layout: bbox.width > bbox.height ? "row" : "column"

                Repeater {
                    model: panesModel

                    delegate: template FilesBox {
                        visible: ! grid.maximizedItem || grid.maximizedItem === objectId

                        maximized: grid.maximizedItem === objectId
                        fillWidth: true
                        fillHeight: true

                        fs: remoteFs
                        path: modelData.value

                        onToggleMaximized: () =>
                        {
                            if (grid.maximizedItem)
                            {
                                grid.maximizedItem = null;
                            }
                            else
                            {
                                grid.maximizedItem = objectId;
                            }
                            grid.update();
                        }

                        onNewPane: (path) =>
                        {
                            panesModel.insert(panesModel.size, path);
                        }

                        onClosePane: () =>
                        {
                            panesModel.remove(modelData.index);
                        }

                        onFilesOpen: (files, idx) =>
                        {
                            mediaModel.insert(mediaModel.size, files);
                        }
                    }
                }

                Repeater {
                    model: mediaModel

                    delegate: template FileViewer {
                        property files: modelData.value

                        visible: ! grid.maximizedItem || grid.maximizedItem === objectId

                        maximized: grid.maximizedItem === objectId
                        fillWidth: true
                        fillHeight: true

                        current: 0

                        onToggleMaximized: () =>
                        {
                            if (grid.maximizedItem)
                            {
                                grid.maximizedItem = null;
                            }
                            else
                            {
                                grid.maximizedItem = objectId;
                            }
                            grid.update();
                        }

                        onFilesChanged: () =>
                        {
                            grid.maximizedItem = objectId;
                            console.log("SET FILES: " + JSON.stringify(files));
                            model.reset(files);
                            current = 0;
                        }

                        onCurrentChanged: () =>
                        {
                            if (current === -1)
                            {
                                if (grid.maximizedItem === objectId)
                                {
                                    grid.maximizedItem = null;
                                }
                                mediaModel.remove(modelData.index);
                            }
                        }
                    }
                }
            }
        }


    }

    Placeholder {
        visible: ! doc.loggedIn

        fillWidth: true
        height: documentRoot.windowHeight

        text: "Pilvini Secure Cloud Drive"
    }

    property settingsDialogT: template SettingsDialog { }

}