require "shellfish/ui";
require "./FilesBox.shui";
require "./FileViewer.shui";
require "./GridLayout.shui";
require "./SettingsDialog.shui";
require "/icons/comm-icons.css";
require "/icons/fs-icons.css";
require "/icons/media-icons.css";
require "/icons/ui-icons.css";

Document {
    id: doc

    property loggedIn: false
    property filesBag: []
    property filesBagSource: null

    property darkMode: systemDarkMode
    property darkTheme: DarkTheme { }
    property lightTheme: Theme { }
    theme: darkMode ? darkTheme : lightTheme

    color: theme.primaryBackgroundColor

    onContextMenu: ev => { ev.accepted = true; }

    onInitialization: () =>
    {
        remoteFs.list("/")
        .then(f =>
        {
            loggedIn = true;
        })
        .catch(err =>
        {
            alert("Login Failed.");
        });
    }

    DavFS {
        id: remoteFs
    }

    OfflineFS {
        id: offlineFs
        volume: "offline"
    }

    ListModel {
        id: panesModel

        data: ["/"]
    }

    ListModel {
        id: mediaModel

        data: []
    }

    Box {
        visible: doc.loggedIn

        fillWidth: true
        height: documentRoot.windowHeight
        color: theme.contentBackgroundColor

        Box {
            fillWidth: true
            height: theme.itemHeightMedium
            color: theme.secondaryBackgroundColor

            layout: "center-row"

            Button {
                fillHeight: true
                flat: true
                icon: "fs-folder"
                text: "Files"
                onClick: () =>
                {
                    panesModel.insert(panesModel.size, path);
                }
            }

            Box { fillWidth: true }

            Button {
                fillHeight: true
                flat: true
                icon: "ui-menu"

                onClick: (ev) =>
                {
                    ev.accepted = true;
                    const menu = menuT();
                    menu.popup(self);
                }

                property menuT: template Menu {

                    MenuItem {
                        text: "About..."
                    }

                    MenuItem {
                        text: doc.darkMode ? "Light Mode"
                                           : "Dark Mode"
                        onClick: () =>
                        {
                            doc.darkMode = ! doc.darkMode;
                        }
                    }

                    MenuItem {
                        text: "Toggle Fullscreen"
                        onClick: () =>
                        {
                            if (documentRoot.fullscreenItem)
                            {
                                documentRoot.fullscreenItem = null;
                            }
                            else
                            {
                                documentRoot.fullscreenItem = documentRoot;
                            }
                        }
                    }

                    MenuItem {
                        text: "Settings..."
                        onClick: () =>
                        {
                            const dlg = doc.settingsDialogT();
                            dlg.show();
                        }
                    }

                    MenuItem {
                        text: "Log Out"
                        onClick: () =>
                        {
                            window.fetch("/logout")
                            .then(() => { window.location.reload(); })
                            .catch(err => { });
                        }
                    }

                }
            }
            
        }

        GridLayout {
            id: grid

            property maximizedItem: null

            fillWidth: true
            fillHeight: true

            layout: bbox.width > bbox.height ? "row" : "column"

            onMaximizedItemChanged: () =>
            {
                wait(100).then(() => { update(); });
            }

            Repeater {
                model: panesModel

                delegate: template FilesBox {
                    visible: ! grid.maximizedItem || grid.maximizedItem === objectId

                    maximized: grid.maximizedItem === objectId
                    fillWidth: true
                    fillHeight: true

                    fs: remoteFs
                    path: modelData.value

                    onToggleMaximized: () =>
                    {
                        if (grid.maximizedItem)
                        {
                            grid.maximizedItem = null;
                        }
                        else
                        {
                            grid.maximizedItem = objectId;
                        }
                        grid.update();
                    }

                    onNewPane: (path) =>
                    {
                        panesModel.insert(panesModel.size, path);
                    }

                    onClosePane: () =>
                    {
                        panesModel.remove(modelData.index);
                    }

                    onFilesOpen: (files, idx) =>
                    {
                        mediaModel.insert(mediaModel.size, files);
                    }

                    onTakeFiles: (files) =>
                    {
                        filesBag = files;
                    }
                }
            }

            Repeater {
                model: mediaModel

                delegate: template FileViewer {
                    property files: modelData.value

                    visible: ! grid.maximizedItem || grid.maximizedItem === objectId

                    maximized: grid.maximizedItem === objectId
                    fillWidth: true
                    fillHeight: true

                    current: 0

                    onToggleMaximized: () =>
                    {
                        if (grid.maximizedItem)
                        {
                            grid.maximizedItem = null;
                        }
                        else
                        {
                            grid.maximizedItem = objectId;
                        }
                        grid.update();
                    }

                    onFilesChanged: () =>
                    {
                        grid.maximizedItem = objectId;
                        console.log("SET FILES: " + JSON.stringify(files));
                        model.reset(files);
                        current = 0;
                    }

                    onCurrentChanged: () =>
                    {
                        if (current === -1)
                        {
                            if (grid.maximizedItem === objectId)
                            {
                                grid.maximizedItem = null;
                            }
                            mediaModel.remove(modelData.index);
                        }
                    }
                }
            }
        }//GridLayout

        Box {
            visible: grid.items.length > 1 && grid.maximizedItem !== null
            fillWidth: true
            height: theme.itemHeightMedium
            color: theme.secondaryBackgroundColor

            layout: "row"

            Repeater {
                model: grid.items.length

                delegate: template Button {
                    fillWidth: true
                    fillHeight: true
                    flat: true
                    checked: grid.items[modelData.index].objectId === grid.maximizedItem
                    icon: grid.items[modelData.index].windowIcon
                    text: grid.items[modelData.index].windowTitle

                    onClick: () =>
                    {
                        grid.maximizedItem = grid.items[modelData.index].objectId;
                    }
                }
            }
        }
    }

    Placeholder {
        visible: ! doc.loggedIn

        fillWidth: true
        height: documentRoot.windowHeight

        text: "Pilvini Secure Cloud Drive"
    }

    property settingsDialogT: template SettingsDialog { }

}