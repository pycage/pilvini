require "shellfish/low" as low;
require "shellfish/ui";
require "./CodePad.shui";
require "./FilesBox.shui";
require "./GridLayout.shui";
require "./SettingsDialog.shui";
require "./TimeLabel.shui";
require "./youtubefs.js";
require "/icons/comm-icons.css";
require "/icons/fs-icons.css";
require "/icons/media-icons.css";
require "/icons/ui-icons.css";

Document {
    id: doc

    property logInPending: true
    property loggedIn: false
    property user: ""

    // a bag of files for copy/move operations
    property filesBag: []
    property filesBagSource: null

    property darkMode: true //systemDarkMode
    property darkTheme: DarkTheme { contentBackgroundColor: colorName("black") }
    property lightTheme: Theme { }
    theme: darkMode ? darkTheme : lightTheme

    property showStatusBar: true

    color: theme.primaryBackgroundColor

    onContextMenu: ev => { ev.accepted = true; }

    onInitialization: () =>
    {
        if (window.localStorage)
        {
            window.localStorage.setItem("shellfish-use-cache", "true");
        }

        remoteFs.list("/")
        .then(f =>
        {
            // already logged in
            logInPending = false;
            loggedIn = true;
        })
        .catch(err =>
        {
            // not logged in yet
            logInPending = false;
        });
    }

    onKeyDown: ev =>
    {
        // dump debug information
        if (ev.key === "d" && ev.ctrlKey)
        {
            console.log("Objects Dump:");
            console.log(core.dumpStatus());
            ev.accepted = true;
        }
    }

    onLoggedInChanged: () =>
    {
        if (loggedIn)
        {
            // initialize
            windowsModel.initModel();

            window.fetch("/whoami")
            .then(req => req.text())
            .then(data =>
            {
                doc.user = data;
            });
        }
    }

    History {
        id: history

        property scopes: []

        onLoad: nil =>
        {
            defer(() =>
            {
                scopes.pop();
            });
        }
    }

    DavFS {
        id: remoteFs
    }

    YouTubeFS {
        id: youTubeFs
    }

    OfflineFS {
        id: offlineFs
        volume: "offline"
    }

    ListModel {
        id: windowsModel

        function initModel()
        {
            reset([
                {
                    component: filesBoxT,
                    properties: {
                        fs: remoteFs,
                        path: "/"
                    }
                }
            ]);
        }
    }

    // main screen
    Box {
        visible: doc.loggedIn

        fillWidth: true
        height: documentRoot.windowHeight
        color: theme.contentBackgroundColor

        // content area
        Box {
            fillWidth: true
            fillHeight: true

            GridLayout {
                id: grid

                property maximizedItem: null
                property fileViewers: []

                fillWidth: true
                fillHeight: true

                layout: bbox.width > bbox.height ? "row" : "column"

                Repeater {
                    id: windowsRepeater

                    model: windowsModel

                    function closePane(idx)
                    {
                        windowsModel.remove(idx);
                        dumpRecycleBin();

                        grid.update();
                    }

                    delegate: template Loader {
                        visible: ! grid.maximizedItem || grid.maximizedItem === objectId

                        property sortIndex: objectId

                        fillWidth: true
                        fillHeight: true

                        onInitialization: () =>
                        {
                            sourceTemplate = modelData.value.component;
                        }

                        onDestruction: () =>
                        {
                            if (grid.maximizedItem === objectId)
                            {
                                grid.maximizedItem = null;
                            }
                        }

                        onItemChanged: () =>
                        {
                            if (item)
                            {
                                for (let key in modelData.value.properties)
                                {
                                    item[key] = modelData.value.properties[key];
                                }

                                item.onToggleMaximized = () =>
                                {
                                    if (grid.maximizedItem)
                                    {
                                        grid.maximizedItem = null;
                                    }
                                    else
                                    {
                                        grid.maximizedItem = objectId;
                                    }
                                    grid.update();
                                };

                                grid.get().onMaximizedItemChanged = safeCallback(() =>
                                {
                                    item.maximized = grid.maximizedItem === objectId;
                                });

                                grid.maximizedItem = objectId;
                                grid.update();
                            }
                        }
                    }
                }

            }//GridLayout

        }

        // status bar
        MouseBox {
            position: "free"

            fillWidth: true
            height: theme.itemHeightMedium
            color: theme.contentBackgroundColor
            layout: "center-row"

            opacity: doc.showStatusBar || containsMouse ? 1.0 : 0.0

            // menu button
            Button {
                fillHeight: true
                flat: true
                icon: "ui-menu"

                onClick: (ev) =>
                {
                    ev.accepted = true;
                    const menu = menuT();
                    menu.popup(self);
                }

                property menuT: template Menu {

                    MenuItem {
                        icon: "fs-folder"
                        text: "File Browser"

                        onClick: () =>
                        {
                            windowsModel.insert(windowsModel.size, {
                                component: filesBoxT,
                                properties: {
                                    fs: remoteFs,
                                    path: "/"
                                }
                            });
                        }
                    }

                    MenuItem {
                        icon: "media-movie"
                        text: "YouTube Browser"

                        onClick: () =>
                        {
                            windowsModel.insert(windowsModel.size, {
                                component: filesBoxT,
                                properties: {
                                    fs: youTubeFs,
                                    path: "/",
                                    searchBox: true
                                }
                            });
                        }
                    }

                    MenuSeparator { }

                    MenuItem {
                        text: doc.darkMode ? "Bright Mode"
                                           : "Dark Mode"
                        onClick: () =>
                        {
                            doc.darkMode = ! doc.darkMode;
                        }
                    }

                    MenuItem {
                        text: "Settings..."
                        onClick: () =>
                        {
                            const dlg = doc.settingsDialogT();
                            dlg.show();
                        }
                    }

                    MenuItem {
                        text: "About..."
                    }

                    MenuSeparator { }

                    MenuItem {
                        text: "Accept Guest Code"
                        onClick: () =>
                        {
                            const dlg = doc.acceptGuestDialogT();
                            dlg.show();
                        }
                    }

                    MenuItem {
                        text: "Log Out"
                        onClick: () =>
                        {
                            window.fetch("/logout")
                            .then(() => { window.location.reload(); })
                            .catch(err => { });
                        }
                    }

                }
            }

            // window list
            Box {
                fillWidth: true
                fillHeight: true
                layout: "row"

                Repeater {
                    model: grid.items.length > 1 ? grid.items.length : 0

                    delegate: template Box {
                        property highlighted: modelData.index < grid.items.length && grid.items[modelData.index].objectId === grid.maximizedItem

                        fillWidth: true
                        fillHeight: true
                        color: highlighted ? theme.secondaryBackgroundColor
                                           : "transparent"
                        layout: "row"
                        
                        Button {

                            fillWidth: true
                            fillHeight: true
                            flat: true
                            //checked: modelData.index < grid.items.length && grid.items[modelData.index].objectId === grid.maximizedItem
                            //icon: modelData.index < grid.items.length && grid.items[modelData.index].item.windowIcon
                            //text: low.escapeMarkup(grid.items[parent.modelData.index]?.item?.windowTitle ?? "")
                            text: "" + (parent.modelData.index + 1)

                            onClick: () =>
                            {
                                if (parent.highlighted)
                                {
                                    grid.maximizedItem = null;
                                }
                                else
                                {
                                    grid.maximizedItem = grid.items[parent.modelData.index].objectId;
                                }
                                grid.update();
                            }
                        }

                        Button {
                            visible: parent.highlighted
                            width: bboxHeight
                            fillHeight: true
                            flat: true
                            icon: "core-window-close"

                            onClick: () =>
                            {
                                windowsRepeater.closePane(parent.modelData.index);
                            }
                        }
                    }
                }
            }

            Label {
                marginLeft: theme.paddingMedium
                text: "[icon:comm-person] " + low.escapeMarkup(doc.user)
            }

            TimeLabel {
                marginLeft: theme.paddingMedium
            }

            Button {
                width: bboxHeight
                fillHeight: true
                flat: true
                icon: documentRoot.fullscreenItem ? "ui-fullscreen_exit"
                                                  : "ui-fullscreen"

                onClick: () =>
                {
                    if (documentRoot.fullscreenItem)
                    {
                        documentRoot.fullscreenItem = null;
                    }
                    else
                    {
                        documentRoot.fullscreenItem = documentRoot;
                    }
                }
            }
        }

    }

    // welcome screen with login options
    Box {
        visible: ! doc.loggedIn && ! doc.logInPending

        fillWidth: true
        height: documentRoot.windowHeight
        layout: "center-column"

        Label {
            visible: ! codeLabel.visible
            fontSize: theme.fontSizeLarge
            text: "Pilvini Private Cloud Drive"
        }

        Label {
            visible: ! codeLabel.visible
            marginBottom: theme.paddingLarge
            fontSize: theme.fontSizeSmall
            color: theme.secondaryColor
            text: "Copyright (c) 2017 - 2023 by Martin Grimme"
        }

        Button {
            visible: ! codeLabel.visible
            marginTop: theme.paddingLarge
            flat: true
            text: "Login"

            onClick: () =>
            {
                window.fetch("/login")
                .then(req =>
                {
                    if (req.ok)
                    {
                        loggedIn = true;
                        windowsModel.dataChanged();
                    }
                })
                .catch(err =>
                {
                    alert(err);
                });
            }
        }

        Button {
            visible: ! codeLabel.visible
            marginTop: theme.paddingLarge
            flat: true
            text: "Request Guest Access"

            onClick: () =>
            {
                const code = Math.round(Math.random() * (9999 - 1000) + 1000);
                codeLabel.text = code;
                window.fetch("/login?code=" + code)
                .then(req =>
                {
                    codeLabel.text = "";
                    if (req.ok)
                    {
                        loggedIn = true;
                        windowsModel.dataChanged();
                    }
                })
                .catch(err =>
                {
                    alert("Login Failed.");
                });
            }
        }

        Label {
            visible: codeLabel.visible
            fontSize: theme.fontSizeLarge
            text: "Awaiting Authorization for Code"
        }

        Label {
            id: codeLabel

            visible: text !== ""
            marginTop: theme.paddingLarge
            fontSize: theme.fontSizeLarge * 2
        }
    }

    property settingsDialogT: template SettingsDialog { }

    property acceptGuestDialogT: template Dialog {
        id: dialog

        title: "Enter Guest Code"

        CodePad {
            width: 300
            height: 340

            onCodeEntered: code =>
            {
                window.fetch("/acceptLogin?code=" + code);
                dialog.parent = null;
            }
        }
    }

    property filesBoxT: template FilesBox { }

}