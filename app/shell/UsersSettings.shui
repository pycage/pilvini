require "shellfish/ui";

Box {
    id: usersBox

    function regRead(key, defaultValue)
    {
        return new Promise((resolve, reject) =>
        {
            window.fetch("/::config?key=" + key)
            .then(response => response.text())
            .then(data => { resolve(JSON.parse(data)); })
            .catch(err => { resolve(defaultValue); });
        });
    }

    function regWrite(key, value)
    {
        return new Promise((resolve, reject) =>
        {
            window.fetch("/::config?key=" + key, { method: "POST", body: JSON.stringify(value) })
            .then(response =>
            {
                if (response.ok)
                {
                    resolve();
                }
                else
                {
                    reject("Server Error");
                }
            })
            .catch(err => { reject(err); });
        });
    }

    function regDelete(key)
    {
        return new Promise((resolve, reject) =>
        {
            window.fetch("/::config?key=" + key, { method: "DELETE" })
            .then(resolve)
            .catch(err => { reject(err); });
        });
    }

    function createUser(name)
    {
        async function f()
        {

            try
            {
                await regWrite("/users/" + name + "/hash", "");
                await regWrite("/users/" + name + "/root", "/");

                priv.users.push({
                    name: name,
                    root: "/"
                });
                listView.model.reset(priv.users);
            }
            catch (err)
            {
                documentRoot.showErrorDialog("Error", "Failed to create user: " + err);
            }
        }

        f();
    }

    function changePassword(pw)
    {
        const userObj = priv.users[listView.currentIndex];
        window.fetch("/::setPassword?user=" + userObj.name + "&password=" + pw)
        .then(() => { })
        .catch(err =>
        {
            documentRoot.showErrorDialog("Error", "Failed to change password: " + err);
        });
    }

    onInitialization: () =>
    {
        async function f()
        {
            const users = await regRead("/users");
            const userObjs = [];
            for (let i = 0; i < users.length; ++i)
            {
                const name = users[i];
                const hash = await regRead("/users/" + name + "/hash", "");
                const root = await regRead("/users/" + name + "/root", "/");

                userObjs.push({ name: name, hash: hash, root: root });
            }

            priv.users = userObjs;
            unsaved = false;
        }

        f();
    }

    fillWidth: true
    fillHeight: true

    Object {
        id: priv

        property users: []
    }

    Box {
        fillWidth: true
        fillHeight: true

        Box {
            fillWidth: true
            layout: "row"

            Button {
                icon: "ui-add"
                text: "New User"

                onClick: ev =>
                {
                    ev.accepted = true;
                    const dlg = usersBox.dialogT();
                    dlg.show();
                }
            }
        }

        Box {
            marginTop: theme.paddingSmall
            fillWidth: true
            fillHeight: true
            color: theme.contentBackgroundColor
            borderColor: theme.borderColor
            borderWidth: 1

            ListView {
                id: listView

                property currentIndex: 0

                fillWidth: true
                fillHeight: true

                cellWidth: bbox.width
                cellHeight: theme.itemHeightLarge

                model: ListModel {
                    data: priv.users
                }

                onCurrentIndexChanged: () =>
                {
                    const root = priv.users[currentIndex].root || "/";
                    rootEntry.text = root;
                }

                delegate: template MouseBox {
                    property selected: listView.currentIndex === modelData.index

                    color: selected ? theme.highlightBackgroundColor
                                    : "transparent"

                    layout: "center-row"

                    onClick: ev =>
                    {
                        ev.accepted = true;
                        listView.currentIndex = modelData.index;
                    }

                    Box {
                        marginLeft: theme.paddingSmall
                        marginRight: theme.paddingMedium
                        fillWidth: true

                        Label {
                            fillWidth: true
                            color: parent.selected ? theme.highlightColor
                                                   : theme.primaryColor
                            text: parent.parent.modelData.value.name
                        }

                        Label {
                            fillWidth: true
                            color: parent.selected ? theme.highlightColor
                                                   : theme.secondaryColor
                            fontSize: theme.fontSizeSmall
                            text: parent.parent.modelData.value.root
                        }
                    }


                    Button {
                        marginRight: theme.paddingSmall
                        icon: "ui-delete"
                        text: "Delete"

                        onClick: () =>
                        {
                            const items = priv.users;
                            items.splice(parent.modelData.index, 1);
                            priv.users = items;
                            listView.model.reset(priv.users);
                            usersBox.regDelete("/users/" + parent.modelData.value.name);
                        }
                    }
                }

                ScrollIndicator { }
            }
        }

        Box {
            fillWidth: true
            fillHeight: true
            marginTop: theme.paddingMedium

            Ruler { id: labelRuler }

            Box {
                fillWidth: true
                height: theme.itemHeightSmall
                layout: "center-row"

                Label {
                    ruler: labelRuler
                    minWidth: labelRuler.max.width
                    text: "Root"
                }

                TextEntry {
                    id: rootEntry

                    fillWidth: true
                    marginLeft: theme.paddingSmall

                    onTextChanged: () =>
                    {
                        const userObj = priv.users[listView.currentIndex];
                        userObj.root = text;
                        usersBox.regWrite("/users/" + userObj.name + "/root", text);
                    }
                }
            }

            Button {
                marginTop: theme.paddingSmall
                text: "Change Password"

                onClick: ev =>
                {
                    ev.accepted = true;
                    const dlg = usersBox.passwordDialogT();
                    dlg.show();
                }
            }

            /*
            Box {
                fillWidth: true
                height: theme.itemHeightSmall
                marginTop: theme.paddingSmall
                layout: "center-row"

                CheckBox {

                }

                Label {
                    fillWidth: true
                    marginLeft: theme.paddingSmall
                    text: "Create Files"
                }

            }

            Box {
                fillWidth: true
                height: theme.itemHeightSmall
                marginTop: theme.paddingSmall
                layout: "center-row"

                CheckBox {

                }

                Label {
                    fillWidth: true
                    marginLeft: theme.paddingSmall
                    text: "Delete Files"
                }

            }
            */
        }
    }



    property dialogT: template Dialog {
        id: dlg

        title: "Create User"

        into buttons Button {
            enabled: nameEntry.text !== ""
            text: "Create"

            onClick: () =>
            {
                usersBox.createUser(nameEntry.text);
                dlg.close();
            }
        }

        into buttons Button {
            marginLeft: theme.paddingSmall
            text: "Cancel"

            onClick: () =>
            {
                dlg.close();
            }
        }

        Box {
            layout: "center-row"

            Label {
                text: "Name"
            }

            TextEntry {
                id: nameEntry

                marginLeft: theme.paddingMedium
            }
        }
    }


    property passwordDialogT: template Dialog {
        id: dlg

        title: "Change Password"

        into buttons Button {
            enabled: passwordEntry.text !== ""
            text: "Apply"

            onClick: () =>
            {
                usersBox.changePassword(passwordEntry.text);
                dlg.close();
            }
        }

        into buttons Button {
            marginLeft: theme.paddingSmall
            text: "Cancel"

            onClick: () =>
            {
                dlg.close();
            }
        }

        Box {
            layout: "center-row"

            Label {
                text: "Password"
            }

            TextEntry {
                id: passwordEntry

                marginLeft: theme.paddingMedium
            }
        }
    }

}