require "shellfish/ui";

Box {
    id: box

    function regRead(key)
    {
        return new Promise((resolve, reject) =>
        {
            window.fetch("/::config?key=" + key)
            .then(response => response.text())
            .then(data => { resolve(JSON.parse(data)); })
            .catch(err => { reject(err); });
        });
    }

    function regWrite(key, value)
    {
        return new Promise((resolve, reject) =>
        {
            window.fetch("/::config?key=" + key, { method: "POST", body: JSON.stringify(value) })
            .then(resolve())
            .catch(err => { reject(err); });
        });
    }

    onInitialization: () =>
    {
        async function f()
        {
            addressEntry.text = await regRead("/server/address");
            portEntry.value = await regRead("/server/port");
            sslSwitch.checked = await regRead("/server/use_ssl");
            certSelector.certificate = await regRead("/server/certificate");

            priv.loaded = true;
        };

        f();
    }

    fillWidth: true
    fillHeight: true

    Object {
        id: priv

        property loaded: false
    }

    Ruler { id: labelRuler }

    Box {
        layout: "center-row"

        Label {
            ruler: labelRuler
            minWidth: labelRuler.max.width
            text: "Listen Adress"
        }

        TextEntry {
            id: addressEntry

            marginLeft: theme.paddingMedium

            onTextChanged: () =>
            {
                if (priv.loaded)
                {
                    box.regWrite("/server/address", text);
                }
            }
        }
    }

    Box {
        marginTop: theme.paddingMedium
        layout: "center-row"

        Label {
            ruler: labelRuler
            minWidth: labelRuler.max.width
            text: "Port"
        }

        SpinBox {
            id: portEntry

            marginLeft: theme.paddingMedium
            minValue: 80
            maxValue: 65535
            stepSize: 1

            onValueChanged: () =>
            {
                if (priv.loaded)
                {
                    box.regWrite("/server/port", value);
                }
            }

        }
    }

    Box {
        marginTop: theme.paddingMedium
        layout: "center-row"

        Label {
            ruler: labelRuler
            minWidth: labelRuler.max.width
            text: "Use SSL"
        }

        Switch {
            id: sslSwitch
            marginLeft: theme.paddingMedium

            onCheckedChanged: () =>
            {
                if (priv.loaded)
                {
                    box.regWrite("/server/use_ssl", checked);
                }
            }
        }
    }

    Box {
        enabled: sslSwitch.checked
        marginTop: theme.paddingMedium
        layout: "center-row"

        Label {
            ruler: labelRuler
            minWidth: labelRuler.max.width
            text: "Certificate"
        }

        Button {
            id: certSelector

            property certificate: ""

            marginLeft: theme.paddingMedium
            text: "Select File"

            onClick: () =>
            {
                fileSelector.open(files =>
                {
                    const f = files[0];
                    f.text()
                    .then(data =>
                    {
                        certificate = data;
                        if (priv.loaded)
                        {
                            box.regWrite("/server/certificate", data);
                        }
                    });
                });
            }
        }

        FileSelector { id: fileSelector }
    }

}