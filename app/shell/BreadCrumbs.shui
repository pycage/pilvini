require "shellfish/low" as low;
require "shellfish/ui";

Box {
    id: box

    property path: ""

    event changePath
    event search

    overflowBehavior: "scroll"
    layout: "center-row"

    onPathChanged: () =>
    {
        const parts = path.split("/");

        let m = [];
        let currentPath = parts[0];
        for (let i = 1; i < parts.length; ++i)
        {
            if (parts[i].length > 0)
            {
                currentPath += "/" + parts[i];
                m.push({ name: decodeURIComponent(parts[i]), path: currentPath });
            }
        }
        m.reverse();
        m.push({ name: "", path: "/" });
        breadCrumbsModel.reset(m);
    }

    ListModel {
        id: breadCrumbsModel
    }

    Button {
        enabled: breadCrumbsModel.size > 1
        fillHeight: true
        flat: true
        icon: "ui-arrow_back"

        onClick: ev =>
        {
            thisHistory.back();
            /*
            const path = breadCrumbsModel.at(1).path;
            box.changePath(path);
            */
        }
    }

    Button {
        fillHeight: true
        flat: true

        labelProfile: Object { property bold: true }

        icon: text === "" ? "fs-drive"
                          : "fs-folder"
        text: breadCrumbsModel.size > 0 ? low.escapeMarkup(breadCrumbsModel.at(0).name || "/")
                                        : ""

        onClick: ev =>
        {
            if (true) //breadCrumbsModel.size > 1)
            {
                const menu = menuT();
                menu.popup(self);
                ev.accepted = true;
            }
        }

        property menuT: template Menu {
            Box {
                Repeater {
                    model: breadCrumbsModel
                    delegate: template MenuItem {
                        visible: modelData.index > 0
                        icon: modelData.index === breadCrumbsModel.size - 1 ? "fs-drive"
                                                                            : "fs-folder"
                        text: low.escapeMarkup(modelData.value.name || "/")

                        onClick: () =>
                        {
                            box.changePath(modelData.value.path);
                        }
                    }
                }
            }

            MenuSeparator { visible: breadCrumbsModel.size > 1 }

            MenuItem {
                icon: "ui-search"
                text: "Search"

                onClick: () =>
                {
                    box.search();
                }
            }
        }
    }

    /*
    Box {
        fillHeight: true
        layout: "row"

        Repeater {
            model: breadCrumbsModel
            delegate: template Button {
                labelProfile: Object {
                    property bold: true
                    //property literal: true
                }
                flat: true
                fillHeight: true
                icon: modelData.index === 0 ? "fs-drive"
                                            : "ui-arrow_right"
                text: modelData.value.name

                onClick: () =>
                {
                    box.changePath(modelData.value.path);
                }
            }
        }
    }
    */

    Box { fillWidth: true }
}