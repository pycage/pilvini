require "shellfish/low" as low;
require "shellfish/ui";
require "./HistoryScope.shui";
require "./ImageViewer.shui";
require "./MediaPlayer.shui";
require "./PdfViewer.shui";
require "./ViewportBox.shui";
require "./youtubevideo.js";

Box {
    id: box

    function open(files, idx)
    {
        thisHistory.push(() =>
        {
            fileViewer.current = -1;
            fileViewer.files = [];
            fileViewer.visible = false;
            fileViewer.maximized = false;
        });

        box.files = files;
        box.current = idx;
    }

    function close()
    {
        thisHistory.back();
    }

    property windowIcon: "media-image"
    property windowTitle: loader.fileItem?.name ?? ""

    property files: []

    property fs: null
    property model: ListModel { data: files }
    property current: -1
    property maximized: false

    property thisFileViewer: self

    HistoryScope { id: thisHistory }

    Box {
        fillWidth: true
        fillHeight: true
        /*
        marginTop: box.maximized ? 0 : theme.paddingMedium
        marginLeft: box.maximized ? 0 : theme.paddingMedium
        marginRight: box.maximized ? 0 : theme.paddingMedium
        marginBottom: box.maximized ? 0 : theme.paddingMedium
        */
        //borderRadius: box.maximized ? 0 : 6

        Loader {
            id: loader

            property fileItem: box.current !== -1 && box.model.size > box.current ? box.model.at(box.current)
                                                                                  : null
            property maximized: item?.maximized || false

            fillWidth: true
            fillHeight: true

            sourceTemplate: (() =>
            {
                if (! fileItem)
                {
                    return null;
                }

                const item = fileItem;
                if (item.mimetype === "application/pdf")
                {
                    return pdfViewerT;
                }
                else if (item.mimetype.startsWith("image/"))
                {
                    return imageViewerT;
                }
                else if (item.mimetype.startsWith("audio/") ||
                         item.mimetype.startsWith("video/"))
                {
                    return mediaPlayerT;
                }
                else if (item.mimetype.startsWith("text/"))
                {
                    console.log("TEXT: " + item.path);
                    return textViewerT;
                }
                else if (item.mimetype === "application/x-youtube-link")
                {
                    return youTubeViewerT;
                }
                else
                {
                    return null;
                }
            })()
        }

    }


    Placeholder {
        visible: box.current === -1
        text: "No File Selected"
    }

    property imageViewerT: template ImageViewer {
        fillWidth: true
        fillHeight: true

        model: box.model
        current: box.current
    }

    property pdfViewerT: template PdfViewer {
        fillWidth: true
        fillHeight: true
        source: loader.fileItem?.path ?? ""
        title: loader.fileItem?.name ?? ""
    }

    property mediaPlayerT: template MediaPlayer {
        fillWidth: true
        fillHeight: true

        model: box.model
        current: box.current

        onCurrentChanged: () =>
        {
            if (box.current !== current)
            {
                box.current = current;
            }
        }
    }

    property youTubeViewerT: template YouTubeVideo {
        fillWidth: true
        fillHeight: true

        property path: loader.fileItem ? loader.fileItem.path : ""
        property title: loader.fileItem ? loader.fileItem.name : path

        server: "yewtu.be"

        onPathChanged: () =>
        {
            box.fs.read(path)
            .then(blob => blob.text())
            .then(json =>
            {
                const obj = JSON.parse(json);
                videoId = obj.videoId;
            })
            .catch(err => { });
        }
    }

    property textViewerT: template Box {
        fillWidth: true
        fillHeight: true

        overflowBehavior: "scroll"

        Label {
            property source: loader.fileItem ? loader.fileItem.path : ""

            fillWidth: true
            overflowBehavior: "wrap"
            literal: true
            fontFamily: "Monospace"

            onSourceChanged: () =>
            {
                if (source === "")
                {
                    text = "";
                }
                else
                {
                    console.log("load " + source);
                    window.fetch(source)
                    .then(r => r.text())
                    .then(safeCallback(d => text = d))
                    .catch(err => { console.error(err); });
                }
            }
        }
    }
}