require "shellfish/low" as low;
require "shellfish/ui";
require "./ImageViewer.shui";
require "./MediaPlayer.shui";
require "./PdfViewer.shui";
require "./ViewportBox.shui";

Box {
    id: box

    property windowIcon: "media-image"
    property windowTitle: loader.fileItem ? loader.fileItem.name : ""

    property model: ListModel { }
    property current: -1
    property maximized: false

    borderWidth: maximized ? 0 : 1
    borderColor: theme.borderColor

    event toggleMaximized

    DropArea {
        fillWidth: true
        fillHeight: true
        marginTop: box.maximized ? 0 : theme.itemHeightMedium

        onDropAccept: ev =>
        {
            if (ev.types.includes("text/x-fileitems"))
            {
                ev.accepted = true;
            }
        }

        onDrop: ev =>
        {
            const items = JSON.parse(ev.data["text/x-fileitems"]);
            box.model.reset(items);
            box.current = 0;
        }

        Loader {
            id: loader

            property fileItem: box.current !== -1 && box.model.size > box.current ? box.model.at(box.current)
                                                                                  : null

            fillWidth: true
            fillHeight: true

            sourceTemplate: (() =>
            {
                if (! fileItem)
                {
                    return null;
                }

                const item = fileItem;
                if (item.mimetype === "application/pdf")
                {
                    return pdfViewerT;
                }
                else if (item.mimetype.startsWith("image/"))
                {
                    return imageViewerT;
                }
                else if (item.mimetype.startsWith("audio/") ||
                        item.mimetype.startsWith("video/"))
                {
                    return mediaPlayerT;
                }
                else if (item.mimetype.startsWith("text/"))
                {
                    console.log("TEXT: " + item.path);
                    return textViewerT;
                }
                else
                {
                    return null;
                }
            })()
        }

    }

    MouseBox {
        opacity: box.maximized && ! containsMouse ? 0 : 1

        position: "free"
        fillWidth: true
        height: theme.itemHeightMedium
        color: theme.secondaryBackgroundColor

        layout: "center-row"

        onDoubleClick: ev =>
        {
            box.toggleMaximized();
            ev.accepted = true;
        }

        Label {
            marginLeft: theme.paddingSmall
            marginRight: theme.paddingSmall
            fillWidth: true
            bold: true
            text: loader.fileItem ? low.escapeMarkup(loader.fileItem.name) : ""
        }

        Button {
            fillHeight: true
            flat: true
            icon: box.maximized ? "ui-unfold_less" : "ui-unfold_more"

            onClick: () =>
            {
                box.toggleMaximized();
            }
        }

        Button {
            fillHeight: true
            flat: true
            icon: "ui-clear"

            onClick: () =>
            {
                box.current = -1;
                box.model.reset([]);
            }
        }
    }

    property imageViewerT: template ImageViewer {
        fillWidth: true
        fillHeight: true

        model: box.model
        current: box.current
        source: loader.fileItem ? loader.fileItem.path : ""
    }

    property pdfViewerT: template PdfViewer {
        fillWidth: true
        fillHeight: true
        source: loader.fileItem ? loader.fileItem.path : ""
    }

    property mediaPlayerT: template MediaPlayer {
        fillWidth: true
        fillHeight: true

        minimized: false

        model: box.model
        current: box.current
    }

    property textViewerT: template Box {
        fillWidth: true
        fillHeight: true

        overflowBehavior: "scroll"

        Label {
            property source: loader.fileItem ? loader.fileItem.path : ""

            fillWidth: true
            overflowBehavior: "wrap"
            literal: true
            fontFamily: "Monospace"

            onSourceChanged: () =>
            {
                if (source === "")
                {
                    text = "";
                }
                else
                {
                    console.log("load " + source);
                    window.fetch(source)
                    .then(r => r.text())
                    .then(safeCallback(d => text = d))
                    .catch(err => { console.error(err); });
                }
            }
        }
    }
}